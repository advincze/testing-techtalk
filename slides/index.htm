<!DOCTYPE html>

<!--
  Google HTML5 slide template

  Authors: Luke Mahé (code)
           Marcin Wichary (code and design)
           
           Dominic Mazzoni (browser compatibility)
           Charles Chen (ChromeVox support)

  URL: http://code.google.com/p/html5slides/
-->

<html>
  <head>
    <title>Testing TechTalk</title>

    <meta charset='utf-8'>
    <script src='slides.js'></script>
    <style type="text/css">
        .highlight-bad{
            background-color: rgba(255,0,0,0.2);
            display: inline-block;
        }

        .highlight-good{
            background-color: rgba(0,255,0,0.2);
            display: inline-block;
        }
    </style>
  </head>

  <body style='display: none'>
    <section class='slides layout-regular template-default'>

      <article class="nobackground">
        <h1>
          Testing TechTalk
        </h1>
        <p>
          Felix Müller
          <br>
          April 24th, 2012
        </p>
        <p>
          <small>github.com/fmueller/testing-techtalk</small>
        </p>
      </article>

      <article class="fill">
        <h3>About me</h3>
        <p><img src="pics/duck-climbing.png" alt="duck-climbing"></p>
      </article>

      <article class="fill">
        <h3>Goal for this talk</h3>
        <p><img src="pics/strongest-in-the-forest.jpg" alt="strongest-in-the-forest"></p>
      </article>

      <article class="nobackground">
        <h1>Agenda</h1>
        <ol>
          <li>The Bigger Picture</li>
          <li>Testing in Detail</li>
          <li>Testing your Persistence Code</li>
          <li>Testing in Legacy Code</li>
        </ol>
      </article>

      <article class="fill">
        <h3>Part 1: The Bigger Picture</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Milky_Way_IR_Spitzer.jpg" alt="Milky_Way_IR_Spitzer"></p>
      </article>

      <article class="nobackground">
        <h3>What's the point of testing?</h3>
        <ul class="build">
          <li>Proofing correctness?</li>
          <li>Detect regression?</li>
          <li>Enable safe refactoring?</li>
          <li>Feedback loop?</li>
          <li>Better design?</li>
        </ul>
        <br>
        <div class="build">
          <p><big>Somehow all points together.</big></p>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          For me:<br>
          It's all about feedback
        </h1>
      </article>

      <article class="nobackground">
        <h3>It's all about feedback</h3>
        <br>
        <div class="build">
          <p>Feedback about:</p>
          <ul class="build">
            <li>correctness of the code</li>
            <li>possibly introduced regression bugs</li>
            <li>quality of code and its design</li>
          </ul>
        </div>
      </article>

      <article class="nobackground">
        <h3>TDD Cycle</h3>
        <p>Should be well-known:</p>
        <p style="text-align: center">
          <img style="width: 500px" src="pics/tdd-cycle.png" alt="tdd-cycle">
        </p>
        <br>
        <div class="build">
          <span>But is this enough?</span>
          <span>...</span>
          <span><b>NO</b></span>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          Start each feature with a failing acceptance test
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          First, test the simplest success case
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Design from inputs to outputs
        </h1>
      </article>

      <article class="fill">
        <h3>How to kick-start this whole testing stuff?</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Space_Shuttle_Columbia_launches.jpg" alt="Space_Shuttle_Columbia_launches"></p>
      </article>

      <article class="nobackground">
        <h3>How to kick-start this whole testing stuff?</h3>
        <br>
        <p>In real world you have to deal with real world problems:</p>
        <ul class="build">
          <li>production-like systems are not running at beginning of project</li>
          <li>brittle staging systems</li>
          <li>distributed knowledge about infrastructure</li>
          <li>many 3rd party systems are not always available</li>
          <li>bad specification of systems and libraries you use</li>
        </ul>
        <br>
        <div class="build">
          <p><big>Nearly <b>impossible</b> to write end-to-end tests.</big></p>
        </div>
      </article>

      <article class="fill">
        <h3>Test a walking skeleton</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/walking-skeleton.jpg" alt="walking-skeleton"></p>
      </article>

      <article class="fill">
        <h3>Part 2: Testing in Detail</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/f-microscopy.jpg" alt="f-microscopy"></p>
      </article>

      <article class="nobackground">
        <h3>About Unit Tests: F.I.R.S.T Principle</h3>
        <br>
        <dl class="build">
            <dt><strong>F</strong>ast</dt><dd>Run hundreds or thousands per second</dd>
            <dt><strong>I</strong>solated</dt><dd>Failure reasons become obvious</dd>
            <dt><strong>R</strong>eliable</dt><dd>Run repeatably in any order, any time</dd>
            <dt><strong>S</strong>elf-validating</dt><dd>No manual evaluation required</dd>
            <dt><strong>T</strong>imely</dt><dd>Written before the code</dd>
        </dl>
      </article>

      <article class="nobackground">
        <h1>
          Test behavior, not methods
        </h1>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <pre class="java prettyprint">
public User {
  // fields, getter and setter
  public User celebrateBirthday() {
    age++;
    return this;
  }
}</pre>
        <div class="build">
        <pre class="java prettyprint">
@Test
public void testCelebrateBirthday() {
  User user = new User();
  User userAfterBirthday = user.celebrateBirthday();

  assertTrue(user == userAfterBirthday);
  assertEquals(user.getAge() + 1, userAfterBirthday.getAge());
}</pre></div>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <pre class="java prettyprint">
@Test
public void <span class="highlight-bad">testCelebrateBirthday</span>() {
  User user = new User();
  User userAfterBirthday = user.celebrateBirthday();

  <span class="highlight-bad">assertTrue(user == userAfterBirthday);</span>
  <span class="highlight-bad">assertEquals(user.getAge() + 1, userAfterBirthday.getAge());</span>
}</pre>
        <div class="build">
        <pre class="java prettyprint">
@Test public void <span class="highlight-good">incrementAgeWhenCelebrateBirthday</span>() {
  User userAfterBirthday = user.celebrateBirthday();
  <span class="highlight-good">assertEquals(user.getAge() + 1, userAfterBirthday.getAge());</span>
}

@Test public void <span class="highlight-good">sameUserAfterCelebrateBirthday</span>() {
  User userAfterBirthday = user.celebrateBirthday();
  <span class="highlight-good">assertTrue(user == userAfterBirthday);</span>
}</pre></div>
      </article>

      <article class="nobackground">
        <h1>
          Write the tests you want to read
        </h1>
      </article>

      <article class="nobackground">
        <h3>Write the tests you want to read</h3>
        <ul class="build">
          <li>test code is as important as production code (maybe more?)</li>
          <li>review your test code continuously</li>
          <li>refactor your test code continuously</li>
          <li>recognize test code as the documentation you always missed</li>
          <li>why not implement own dsl only for tests?</li>
        </ul>
      </article>

      <article class="nobackground">
        <h1>
          One assert per test
        </h1>
      </article>

      <article class="nobackground">
        <h3>One assert per test</h3>
        <br>
        <div class="build">
          <p>Are you kidding?</p>
          <p>No. ;-)</p>
        </div>
        <br>
        <div class="build">
          <span>Because one assert per test:</span>
          <ul class="build">
            <li>simplifies naming of tests</li>
            <li>forces you to think more about your tests</li>
            <li>causes less brittle tests</li>
            <li>gives you the ability that you know exactly what is wrong if one test fails</li>
          </ul>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          Watch the test fail
        </h1>
      </article>

      <article class="nobackground">
        <h3>Watch the test fail</h3>
        <br>
        <div class="build">
          <p>The quality of a test is how good it points you to the failure in your system if it fails.</p>
        </div>
        <br>
        <div class="build">
          <p>So, improve the TDD cycle:</p>
        </div>
        <ol class="build">
          <li>Write a test</li>
          <li>Watch it fail</li>
          <li><big>Improve the failure message until you know exactly why it is failing</big></li>
          <li>Write code to make the test pass</li>
          <li>Refactor and go to one</li>
        </ol>
      </article>

      <article class="fill">
        <h3>Listen to the tests</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/a-little-fennec-fox.jpg" alt="a-little-fennec-fox"></p>
      </article>

      <article class="nobackground">
        <h3>Listen to the tests</h3>
        <br>
        <div class="build">
          <p>If something is difficult to test, ask yourself:</p>
          <ul class="build">
            <li>not only how to test it</li>
            <li>also <big><b>why</b></big> is it hard to test</li>
          </ul>
        </div>
        <br>
        <div class="build">
          <p>Often a sign for:</p>
          <ul class="build">
            <li>design issues</li>
            <li>tight coupling</li>
            <li>low cohesion</li>
            <li>so, problems that hit you in maintenance and further development</li>
          </ul>
        </div>
      </article>

      <article class="fill">
        <h3>Part 3: Testing your Persistence Code</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Mountain.jpg" alt="Mountain"></p>
      </article>

      <article class="nobackground">
        <h1>
          Isolate tests that deal with persistent state
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          To commit or not to commit?
        </h1>
      </article>

      <article class="nobackground">
        <h3>To commit or not to commit?</h3>
        <br>
        <div class="build">
          <p>Common pattern:</p>
          <ul class="build">
            <li>open a transaction</li>
            <li>run the test</li>
            <li>roll the transaction back</li>
          </ul>
          <br>
        </div>
        <div class="build">
          <p>BUT:</p>
          <p>Without hitting the database you don't know how your persistence code really works.</p>
          <p>Answer: Commit</p>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          Clean up persistent data at start of a test
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Make transaction boundaries explicit
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Round-tripping persistent objects
        </h1>
      </article>

      <article class="fill">
        <h3>Part 4: Testing in Legacy Code</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/iceland-volcano-eruption.jpg" alt="iceland-volcano-eruption"></p>
      </article>

      <article class="nobackground">
        <h3>References</h3>
        <p>TODO</p>
      </article>
    </section>
  </body>
</html>
