<!DOCTYPE html>

<!--
  Google HTML5 slide template

  Authors: Luke Mahé (code)
           Marcin Wichary (code and design)
           
           Dominic Mazzoni (browser compatibility)
           Charles Chen (ChromeVox support)

  URL: http://code.google.com/p/html5slides/
-->

<html>
  <head>
    <title>Testing Knowledge</title>

    <meta charset='utf-8'>
    <script src='slides.js'></script>
    <style type="text/css">
        .highlight-bad{
            background-color: rgba(255,0,0,0.2);
            display: inline-block;
        }

        .highlight-good{
            background-color: rgba(0,255,0,0.2);
            display: inline-block;
        }
    </style>
  </head>

  <body style='display: none'>
    <section class='slides layout-regular template-default'>

      <article class="nobackground">
        <h1>
          Testing, do you speak it?
        </h1>
        <p>
          <small>Java Edition</small>
        </p>
        <p>
          Felix Müller
          <br>
          April 5th, 2013
        </p>
        <p>
          <small>github.com/fmueller/testing-techtalk/tree/bedcon</small>
        </p>
      </article>

      <article class="fill">
        <h3>Current status of our industry regarding testing</h3>
        <p><img src="pics/duck-climbing.png" alt="duck-climbing"></p>
      </article>

      <article class="fill">
        <h3>Goal for this talk</h3>
        <p><img src="pics/strongest-in-the-forest.jpg" alt="strongest-in-the-forest"></p>
      </article>

      <article class="nobackground">
        <h1>
          Before we dive into testing:<br>
          Be honest!
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Which of you suspend writing tests due time pressure?
        </h1>
        <br>
        <small>Or lack of infrastructure, manpower, whatever.</small>
        <br>
        <small>Sometimes.</small>
      </article>

      <article class="fill">
        <h3>Do not be ashamed or feel guilty. Me too.</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/cat_caught.png" alt="cat_caught"></p>
      </article>

      <article class="nobackground">
        <h3>But it's kinda strange that we are still acting that way.</h3>
        <p style="text-align: center">
          <img style="height: 600px" src="pics/Unit-testing.png" alt="unit testing comic strip">
        </p>
      </article>

      <article class="fill">
        <h3>The Bigger Picture</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Milky_Way_IR_Spitzer.jpg" alt="Milky_Way_IR_Spitzer"></p>
      </article>

      <article class="nobackground">
        <h1>
          Testing is all about feedback
        </h1>
      </article>

      <article class="nobackground">
        <h3>TDD Cycle</h3>
        <p>Should be well-known:</p>
        <p style="text-align: center">
          <img style="width: 500px" src="pics/tdd-cycle.png" alt="tdd-cycle">
        </p>
        <br>
        <div>
          <span>But is this enough?</span>
          <span>...</span>
          <span><b>NO</b></span>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          TDD is only for developers
        </h1>
        <br>
        <small>Clients and managers do not care about it</small>
      </article>

      <article class="nobackground">
        <h1>
          ATDD tries to add business value guided by tests
        </h1>
        <br>
        <small>Acceptance Test Driven Development</small>
      </article>

      <article class="nobackground">
        <h1>
          Start each feature with a failing acceptance test
        </h1>
        <br>
        <small>Executable requirements</small>
      </article>

      <article class="nobackground">
        <h1>
          First, test the simplest success case
        </h1>
      </article>

      <article class="fill">
        <h3>How to kick-start this whole testing stuff?</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Space_Shuttle_Columbia_launches.jpg" alt="Space_Shuttle_Columbia_launches"></p>
      </article>

      <article class="fill">
        <h3>Start with a walking skeleton</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/walking-skeleton.jpg" alt="walking-skeleton"></p>
      </article>

      <article class="fill">
        <h3>Testing in Detail</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/f-microscopy.jpg" alt="f-microscopy"></p>
      </article>

      <article class="nobackground">
        <h3>About Unit Tests: F.I.R.S.T Principle</h3>
        <br>
        <dl>
            <dt><big>F</big>ast</dt><dd>Run hundreds or thousands per second</dd>
            <dt><big>I</big>solated</dt><dd>Failure reasons become obvious</dd>
            <dt><big>R</big>eliable</dt><dd>Run repeatably in any order, any time</dd>
            <dt><big>S</big>elf-validating</dt><dd>No manual evaluation required</dd>
            <dt><big>T</big>imely</dt><dd>Written before the code</dd>
        </dl>
      </article>

      <article class="nobackground">
        <h1>
          Test behavior, not methods
        </h1>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <br>
        <p>Simplified example:</p>
        <pre class="java prettyprint">
@Test
public void <span class="highlight-bad">testAddDays</span>() {
  assertEquals(2, newDate(2012, 1, 1).addDays(1).getDay());
  assertEquals(29, newDate(2012, 2, 28).addDays(1).getDay());
  assertEquals(1, newDate(2012, 2, 29).addDays(1).getDay());
  assertEquals(2013, newDate(2012, 12, 31).addDays(1).getYear());
  assertEquals(3, newDate(2012, 2, 29).addDays(1).getMonth());
}</pre>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <pre class="java prettyprint">
@Test
public void <span class="highlight-good">incrementDayWhenAddOneDay</span>() {
  assertEquals(2, newDate(2012, 1, 1).addDays(1).getDay());
}

@Test
public void <span class="highlight-good">incrementYearOnEndOfYear</span>() {
  assertEquals(2013, newDate(2012, 12, 31).addDays(1).getYear());
}

@Test
public void <span class="highlight-good">beAwareOfLeapYears</span>() {
  assertEquals(29, newDate(2012, 2, 28).addDays(1).getDay());
  assertEquals(3, newDate(2012, 2, 29).addDays(1).getMonth());
  assertEquals(1, newDate(2012, 2, 29).addDays(1).getDay());
}</pre>
      </article>

      <article class="nobackground">
        <h1>
          Structure your test implementation
        </h1>
      </article>

      <article class="nobackground">
        <h3>Structure your test implementation</h3>
        <br>
        <div>
          <p>Common anti-pattern:</p>
          <br>
            <pre class="java prettyprint">
@Test
public void someTestMethod() {
  // setup system
  // assert something
  // next action
  // check some state
  // assert something
  // ...
}
</pre>
        </div>
      </article>

      <article class="nobackground">
        <h3>Structure your test implementation</h3>
        <br>
        Per test always:
        <br>
        <ul>
          <li>setup system for test</li>
          <li>do your test action</li>
          <li>assert expected system state</li>
        </ul>
        <div>
          <pre class="java prettyprint">
@Test
public void someTestMethod() {
  // given
  // when
  // then
}
</pre>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          One (logical) assert per test
        </h1>
        <br>
        <small>Use own assert methods and matcher libraries</small>
      </article>

      <article class="nobackground">
        <h3>One (logical) assert per test</h3>
        <br>
        <div>
            <p>So, what could be improved in this simplified test method?</p>
            <pre class="java prettyprint">
@Test
public void jsonConverterShouldTransformIntoCorrectPerson() {
  Person person = converter.transform(/* json input */);
  <span class="highlight-bad">assertEquals</span>("Max", person.getFirstName());
  <span class="highlight-bad">assertEquals</span>("Mustermann", person.getSurname());
  <span class="highlight-bad">assertEquals</span>(40, person.getAge());
}</pre>
        </div>
      </article>

      <article class="nobackground">
        <h3>One (logical) assert per test</h3>
        <br>
        <pre class="java prettyprint">
@Test
public void jsonConverterShouldTransformIntoCorrectPerson() {
  Person person = converter.transform(/* json input */);
  <span class="highlight-good">assertPersonEquals</span>(new Person("Max", "Mustermann", 40), person);
}

private void assertPersonEquals(Person expected, Person actual) {
  assertEquals(expected.getFirstName(), actual.getFirstName());
  assertEquals(expected.getSurname(), actual.getSurname());
  assertEquals(expected.getAge(), actual.getAge());
}</pre>
      </article>

      <article class="fill">
        <h3>Watch the test fail</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/camera-fail-source.jpg" alt="camera-fail-source"></p>
      </article>

      <article class="nobackground">
        <h3>Watch the test fail</h3>
        <br>
        <ol>
          <li>Write a test</li>
          <li>Watch it fail</li>
          <li><big>Improve the failure message until you know exactly why it is failing</big></li>
          <li>Write code to make the test pass</li>
          <li>Refactor and go to first point</li>
        </ol>
      </article>

      <article class="fill">
        <h1>Test boundary cases</h1>
      </article>

      <article class="fill">
        <h3>Listen to the tests</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/a-little-fennec-fox.jpg" alt="a-little-fennec-fox"></p>
      </article>

      <article class="nobackground">
        <h1>
          Write the tests you want to read
        </h1>
        <br>
        <small>Test code is as important as production code</small>
      </article>

      <article class="nobackground">
        <h3>Thanks for listening!</h3>
        <br>
        <p><small>If you want to stay in contact:</small></p>
        <br>
        <div>
            <p><small>cupofjava.de</small></p>
            <p><small>@fmueller_bln</small></p>
            <p><small>gplus.to/fmueller</small></p>
        </div>
        <br>
        <p><small>Slides: github.com/fmueller/testing-techtalk/tree/bedcon</small></p>
      </article>

      <article class="smaller">
        <h3>References</h3>
        <ul>
          <li>Article: <a href="http://agileinaflash.blogspot.de/2009/02/first.html">F.I.R.S.T</a></li>
          <li>Article: <a href="http://maxheapsize.com/2011/06/14/one-assert-per-test-really/">One assert per test, really.</a></li>
          <li>Book: Clean Code (by Robert C. Martin)</li>
          <li>Book: Growing Object-Oriented Software, Guided by Tests (by Steve Freeman and Nat Pryce)</li>
          <li>Book: Working Effectively with Legacy Code (by Michael Feathers)</li>
          <li>Presentation: <a href="http://downloads.printhelloworld.de/testing-slides/">Painless Testing</a></li>
        </ul>
      </article>
    </section>
  </body>
</html>
