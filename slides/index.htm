<!DOCTYPE html>

<!--
  Google HTML5 slide template

  Authors: Luke MahÃ© (code)
           Marcin Wichary (code and design)
           
           Dominic Mazzoni (browser compatibility)
           Charles Chen (ChromeVox support)

  URL: http://code.google.com/p/html5slides/
-->

<html>
  <head>
    <title>Testing Knowledge</title>

    <meta charset='utf-8'>
    <script src='slides.js'></script>
    <style type="text/css">
        .highlight-bad{
            background-color: rgba(255,0,0,0.2);
            display: inline-block;
        }

        .highlight-good{
            background-color: rgba(0,255,0,0.2);
            display: inline-block;
        }
    </style>
  </head>

  <body style='display: none'>
    <section class='slides layout-regular template-default'>

      <article class="nobackground">
        <h1>
          Testing, do you speak it?
        </h1>
        <p>
          Adam Vincze, Moritz Zimmer (slides orginally by Felix M&uuml;ller)
          <br>
          <small>@fmueller_bln</small>
        </p>
        <p>
          <small>github.com/fmueller/testing-techtalk</small>
        </p>
      </article>

      <article class="fill">
        <h3>Goal for this talk</h3>
        <p><img src="pics/strongest-in-the-forest.jpg" alt="strongest-in-the-forest"></p>
      </article>

      <article class="fill">
        <h3>Current status regarding testing</h3>
        <p><img src="pics/duck-climbing.png" alt="duck-climbing"></p>
      </article>

      <article class="nobackground">
        <h1>
          Before we dive into testing:<br>
          Be honest!
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Who of you suspend writing tests due time pressure?
        </h1>
        <br>
        <small>Or lack of infrastructure, manpower, whatever.</small>
        <br>
        <small>Sometimes.</small>
      </article>

      <article class="fill">
        <h3>Do not be ashamed or feel guilty. Me too.</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/cat_caught.png" alt="cat_caught"></p>
      </article>

      <article class="nobackground">
        <h3>TODO: Sonar code coverage status!!!!!</h3>
        <p style="text-align: center">
          Screenshot
        </p>
      </article>

<article class="nobackground">
        <h1>Agenda</h1>
        <ol>
          <li>The Bigger Picture</li>
          <li>Unit Testing in Detail</li>
          <li>Testing in Legacy Code</li>
        </ol>
      </article>

      <article class="fill">
        <h3>Part 1: The Bigger Picture</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/Milky_Way_IR_Spitzer.jpg" alt="Milky_Way_IR_Spitzer"></p>
      </article>

      <article class="nobackground">
        <h3>What's the point of testing?</h3>
        <ul class="build">
          <li>Enable safe refactoring?</li>
          <li>Better design?</li>
          <li>Feedback loop?</li>
        </ul>
        <br>
        <div class="build">
          <p><big>Somehow all points together.</big></p>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          For us:<br>
          It's all about feedback
        </h1>
      </article>

      <article class="nobackground">
        <h3>It's all about feedback</h3>
        <br>
        <div class="build">
          <p>Feedback about:</p>
          <ul class="build">
            <li>correctness of the code</li>
            <li>possibly introduced regression bugs</li>
            <li>quality of code and its design</li>
          </ul>
          <br>
          <p>Who thinks I forgot something?</p>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          Business value?
        </h1>
        <div class="build">
          <br>
        <small>Customers and managers do not care about it</small>
        <br>
        <p>
          <small>... but do care about quality (extensibility, maintainability, keeping deadlines...)</small>
        </p>
        <p>
          inseparable from every new feature!
        </p>
      </div>
      </article>


      <article class="fill">
        <h3>Part 2: Unit Testing in Detail</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/f-microscopy.jpg" alt="f-microscopy"></p>
      </article>

      <article class="nobackground">
        <h3>About Unit Tests: F.I.R.S.T Principle</h3>
        <br>
        <dl class="build">
            <dt><strong>F</strong>ast</dt><dd>Run hundreds or thousands per second</dd>
            <dt><strong>I</strong>solated</dt><dd>Failure reasons become obvious (the test should state exactly what is wrong and where)</dd>
            <dt><strong>R</strong>epeatable</dt><dd>Run in any order, any time, any place (setup and tear down)</dd>
            <dt><strong>S</strong>elf-validating</dt><dd>No manual evaluation required</dd>
            <dt><strong>T</strong>imely</dt><dd>Written immediately before the code - writing the test first makes a difference.</dd>
        </dl>
      </article>

      <article class="nobackground">
        <h1>
          Test behavior, not methods
        </h1>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <br>
        <p>Simplified example:</p>
        <pre class="java prettyprint">
@Test
public void <span class="highlight-bad">testAddDays</span>() {
  assertEquals(2, newDate(2012, 1, 1).addDays(1).getDay());
  assertEquals(29, newDate(2012, 2, 28).addDays(1).getDay());
  assertEquals(1, newDate(2012, 2, 29).addDays(1).getDay());
  assertEquals(2013, newDate(2012, 12, 31).addDays(1).getYear());
  assertEquals(3, newDate(2012, 2, 29).addDays(1).getMonth());
}</pre>
      </article>

      <article class="nobackground">
        <h3>Test behavior, not methods</h3>
        <pre class="java prettyprint">
@Test
public void <span class="highlight-good">incrementDayWhenAddOneDay</span>() {
  assertEquals(2, newDate(2012, 1, 1).addDays(1).getDay());
}

@Test
public void <span class="highlight-good">incrementYearOnEndOfYear</span>() {
  assertEquals(2013, newDate(2012, 12, 31).addDays(1).getYear());
}

@Test
public void <span class="highlight-good">beAwareOfLeapYears</span>() {
  assertEquals(29, newDate(2012, 2, 28).addDays(1).getDay());
  assertEquals(3, newDate(2012, 2, 29).addDays(1).getMonth());
  assertEquals(1, newDate(2012, 2, 29).addDays(1).getDay());
}</pre>
      </article>

      <article class="nobackground">
        <h1>
          Structure your test implementation
        </h1>
      </article>

      <article class="nobackground">
        <h3>Structure your test implementation</h3>
        <br>
        <div class="build">
          <p>Common anti-pattern these days:</p>
          <br>
            <pre class="java prettyprint">
@Test
public void testMethod() {
  // setup system
  // assert something
  // next action
  // check some state
  // assert something
  // ...
}
</pre>
        </div>
      </article>


      <article class="nobackground">
        <h3>Structure your test implementation</h3>
        <br>
        Per test always:
        <br>
        <ul class="build">
          <li>setup system for test</li>
          <li>do your test action</li>
          <li>assert expected system state</li>
        </ul>
        <div class="build">
          <pre class="java prettyprint">
@Test
public void testMethod() {
  // given
  // when
  // then
}
</pre>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          One assert per test
        </h1>
      </article>

      <article class="nobackground">
        <h3>One assert per test</h3>
        <br>
        <div class="build">
          <span>Are you kidding?</span>
          <span>No. ;-)</span>
        </div>
        <br>
        <div class="build">
          <span>Because one assert per test:</span>
          <ul class="build">
            <li>simplifies naming of tests</li>
            <li>causes less fragile tests</li>
            <li>focus on the purpose of the test (behaviour)</li>
          </ul>
        </div>
        <br>
        <div class="build">
          <span>Not always possible, unreachable goal, BUT:</span>
          <ul class="build">
            <li>DRY, implement own assert methods</li>
            <li>use matcher libraries to increase expressiveness</li>
          </ul>
        </div>
      </article>

      <article class="nobackground">
        <h3>One assert per test</h3>
        <br>
        <p>To use as less logical asserts per test as possible is a reachable goal.</p>
        <br>
        <div class="build">
            <p>So, what could be improved in this simplified test method?</p>
            <pre class="java prettyprint">
@Test
public void jsonConverterShouldTransformIntoCorrectPerson() {
  Person person = converter.transform(/* json input */);
  <span class="highlight-bad">assertEquals</span>("Max", person.getFirstName());
  <span class="highlight-bad">assertEquals</span>("Mustermann", person.getSurname());
  <span class="highlight-bad">assertEquals</span>(40, person.getAge());
}</pre>
        </div>
      </article>

      <article class="nobackground">
        <h3>One assert per test</h3>
        <br>
        <pre class="java prettyprint">
@Test
public void jsonConverterShouldTransformIntoCorrectPerson() {
  Person person = converter.transform(/* json input */);
  <span class="highlight-good">assertPersonEquals</span>(new Person("Max", "Mustermann", 40), person);
}

private void assertPersonEquals(Person expected, Person actual) {
  assertEquals(expected.getFirstName(), actual.getFirstName());
  assertEquals(expected.getSurname(), actual.getSurname());
  assertEquals(expected.getAge(), actual.getAge());
}</pre>
      </article>

      <article class="fill">
        <h3>Watch the test fail</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/camera-fail-source.jpg" alt="camera-fail-source"></p>
      </article>

      <article class="nobackground">
        <h3>Watch the test fail</h3>
        <br>
        <div class="build">
          <p>The quality of a test is how good it points you to the failure in your system if it fails.</p>
        </div>
        <br>
        <div class="build">
          <p>So, improve the TDD cycle:</p>
        </div>
        <ol class="build">
          <li>Write a test</li>
          <li>Watch it fail</li>
          <li><big>Improve the failure message until you know exactly why it is failing</big></li>
          <li>Write code to make the test pass</li>
          <li>Refactor and go to first point</li>
        </ol>
      </article>

      <article class="fill">
        <h3>Listen to the tests</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/a-little-fennec-fox.jpg" alt="a-little-fennec-fox"></p>
      </article>

      <article class="nobackground">
        <h3>Listen to the tests</h3>
        <br>
        <div class="build">
          <p>If something is difficult to test, ask yourself:</p>
          <ul class="build">
            <li>not only how to test it</li>
            <li>also <big><b>why</b></big> is it hard to test</li>
          </ul>
        </div>
        <br>
        <div class="build">
          <p>Often a sign for:</p>
          <ul class="build">
            <li>design issues</li>
            <li>tight coupling</li>
            <li>low cohesion</li>
            <li>so, problems that hit you in maintenance and further development</li>
          </ul>
        </div>
      </article>

      <article class="nobackground">
        <h1>
          Write the tests you want to read
        </h1>
      </article>

      <article class="nobackground">
        <h3>Write the tests you want to read</h3>
        <ul class="build">
          <li>test code is as important as production code (maybe more?)</li>
          <li>review your test code continuously</li>
          <li>refactor your test code continuously</li>
          <li>recognize test code as the documentation you always missed</li>
          <li>why not implement own dsl only for tests?</li>
        </ul>
      </article>

      
      <article class="fill">
        <h3>Part 4: Testing in Legacy Code</h3>
        <p><img style="max-width: 100%; max-height: 100%" src="pics/iceland-volcano-eruption.jpg" alt="iceland-volcano-eruption"></p>
      </article>

      <article class="nobackground">
        <h2>
          <q>The main thing that distinguishes legacy code from non-legacy code is tests, or rather a lack of tests.</q>
          <div class="author">
            Michael Feathers
          </div>
        </h2>
      </article>

      <article class="nobackground">
        <h1>
          We produce legacy code every single day.
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          Legacy code is extremely hard to test.
        </h1>
      </article>

      <article class="nobackground">
        <h1>
          One smell in legacy code:<br>
          Dependencies of classes are not explicit.
        </h1>
      </article>

      <article class="nobackground">
        <h3>Dependencies of classes are not explicit.</h3>
        <pre class="java prettyprint">
public class Account {

  private TransferService transferService;

  public Account() {
    <span class="highlight-bad">DataSource dataSource = new DataSource(SQLConfig.getInstance());</span>
    <span class="highlight-bad">transferService = new TransferService(dataSource);</span>
  }

  public Receipt transferToThis(Account other, BigDecimal amount) {
    return transferService.performTransfer(other, this, amount);
  }
}</pre>
      </article>

      <article class="nobackground">
        <h3>Dependencies of classes are not explicit.</h3>
        <ul class="build">
          <li>
            set up the class for test is hard:
            <br>
            <ul class="build">
              <li>database has to be available</li>
              <li>database configuration has to be correct</li>
            </ul>
          </li>
          <li>hard to test in isolation</li>
        </ul>
      </article>

      <article class="nobackground">
        <h3>Dependencies of classes are not explicit.</h3>
        <pre class="java prettyprint">
public class Account {

  private TransferService transferService;

  public <span class="highlight-good">Account(TransferService transferService)</span> {
    <span class="highlight-good">this.transferService = transferService;</span>
  }

  public Receipt transferToThis(Account other, BigDecimal amount) {
    return transferService.performTransfer(other, this, amount);
  }
}</pre>
      <div class="build">
        <p>Surprise, surprise: dependency injection</p>
      </div>
      </article>

      <article class="nobackground">
        <h3>That was only the tip of the iceberg.</h3>
        <br>
        <p style="text-align: center">
          <img style="height: 500px" src="pics/feathers-book.jpg" alt="feathers-book">
        </p>
      </article>

      <article class="nobackground" style="text-align: center">
        <h3>Thanks for listening!</h3>
        <br>
        <p><small>github.com/fmueller/testing-techtalk</small></p>
        <br>
        <div>
            <p><small>@fmueller_bln</small></p>
            <p><small>gplus.to/fmueller</small></p>
            <p><small>cupofjava.de</small></p>
        </div>
      </article>

      <article class="smaller">
        <h3>References</h3>
        <ul>
          <li>Article: <a href="http://agileinaflash.blogspot.de/2009/02/first.html">F.I.R.S.T</a></li>
          <li>Article: <a href="http://maxheapsize.com/2011/06/14/one-assert-per-test-really/">One assert per test, really.</a></li>
          <li>Book: Clean Code (by Robert C. Martin)</li>
          <li>Book: Growing Object-Oriented Software, Guided by Tests (by Steve Freeman and Nat Pryce)</li>
          <li>Book: Working Effectively with Legacy Code (by Michael Feathers)</li>
          <li>Presentation: <a href="http://downloads.printhelloworld.de/testing-slides/">Painless Testing</a></li>
        </ul>
      </article>
    </section>
  </body>
</html>
